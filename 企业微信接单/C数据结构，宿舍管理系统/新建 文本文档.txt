c语言和数据结构完成项目，要求代码丰富合理：


1程序开始运行从stu.txt文件读取数据，建立数据文件，按照字宿舍号进行冒泡排序

stu.txt文件字段包括：宿舍号、姓名、学号、床位、男女、人数

字段说明：一个房间4最多4个人，每个学生可以选择一个床位编号1-4

2菜单（用二分法实现查询操作）
添加数据，输入宿舍号，姓名，学号、床位1-4、男女、人数
保存数据到文件stu.txt
按姓名查询
按学号查询
按宿舍号查询
床位号查询学生信息
办理住宿查询空床位

3作为一个系统，可以连续操作


文件读取参考这两个程序：
#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>


// 订单状态枚举
enum OrderStatus {
	PENDING,    // 待处理
	PROCESSING, // 处理中
	COMPLETED,  // 完成
	CANCELLED   // 取消
};

// 订单结构体
struct Order {
	int id;                 // 订单ID
	std::string customer;   // 客户姓名
	double amount;          // 订单金额
	OrderStatus status;     // 订单状态
	
	Order(int _id, std::string _customer, double _amount)
	: id(_id), customer(_customer), amount(_amount), status(PENDING) {}
};

// 订单处理类
class OrderProcessor {
private:
	std::vector<Order> orders;  // 存储订单的容器
	
public:
	void addOrder(const Order& order) {
		orders.push_back(order);
	}
	
	void processOrder(int orderId) {
		for (auto& order : orders) {
			if (order.id == orderId) {
				order.status = PROCESSING;
				break;
			}
		}
	}
	
	void completeOrder(int orderId) {
		for (auto& order : orders) {
			if (order.id == orderId) {
				order.status = COMPLETED;
				break;
			}
		}
	}
	
	void cancelOrder(int orderId) {
		for (auto& order : orders) {
			if (order.id == orderId) {
				order.status = CANCELLED;
				break;
			}
		}
	}
	
	bool refundOrder(int orderId) {
		for (auto& order : orders) {
			if (order.id == orderId && order.status == COMPLETED) {
				order.status = CANCELLED;
				return true;
			}
		}
		return false;
	}
	
	void saveOrdersToFile(const std::string& filename) {
		std::ofstream outputFile(filename);
		if (outputFile.is_open()) {
			for (const auto& order : orders) {
				outputFile << order.id << "," << order.customer << ","
				<< order.amount << "," << order.status << std::endl;
			}
			outputFile.close();
		} else {
			std::cout << "Error: Failed to open file for writing." << std::endl;
		}
	}
	
	void loadOrdersFromFile(const std::string& filename) {
		std::ifstream inputFile(filename);
		if (inputFile.is_open()) {
			orders.clear();
			std::string line;
			while (std::getline(inputFile, line)) {
				int id;
				std::string customer;
				double amount;
				OrderStatus status;
				
				std::stringstream ss(line);
				std::string token;
				std::getline(ss, token, ',');
				id = std::stoi(token);
				
				std::getline(ss, token, ',');
				customer = token;
				
				std::getline(ss, token, ',');
				amount = std::stod(token);
				
				std::getline(ss, token, ',');
				status = static_cast<OrderStatus>(std::stoi(token));
				
				Order order(id, customer, amount);
				order.status = status;
				orders.push_back(order);
			}
			inputFile.close();
		} else {
			std::cout << "Error: Failed to open file for reading." << std::endl;
		}
	}
	
	void printOrders() {
		for (const auto& order : orders) {
			std::cout << "Order ID: " << order.id << std::endl;
			std::cout << "Customer: " << order.customer << std::endl;
			std::cout << "Amount: $" << order.amount << std::endl;
			std::cout << "Status: ";
			switch (order.status) {
			case PENDING:
				std::cout << "Pending";
				break;
			case PROCESSING:
				std::cout << "Processing";
				break;
			case COMPLETED:
				std::cout << "Completed";
				break;
			case CANCELLED:
				std::cout << "Cancelled";
				break;
			}
			std::cout << std::endl << std::endl;
		}
	}
};

void printMenu() {
	std::cout << "===== 订单处理系统 =====" << std::endl;
	std::cout << "1. 添加订单" << std::endl;
	std::cout << "2. 处理订单" << std::endl;
	std::cout << "3. 完成订单" << std::endl;
	std::cout << "4. 取消订单" << std::endl;
	std::cout << "5. 退款订单" << std::endl;
	std::cout << "6. 保存订单到文件" << std::endl;
	std::cout << "7. 从文件加载订单" << std::endl;
	std::cout << "8. 打印订单" << std::endl;
	std::cout << "9. 退出系统" << std::endl;
	std::cout << "======================" << std::endl;
	std::cout << "请选择操作: ";
}

int main() {
	OrderProcessor orderProcessor;
	
	int choice;
	do {
		printMenu();
		std::cin >> choice;
		
		switch (choice) {
			case 1: {
				int id;
				std::string customer;
				double amount;
				
				std::cout << "请输入订单ID: ";
				std::cin >> id;
				
				std::cout << "请输入客户姓名: ";
				std::cin.ignore();
				std::getline(std::cin, customer);
				
				std::cout << "请输入订单金额: ";
				std::cin >> amount;
				
				orderProcessor.addOrder(Order(id, customer, amount));
				std::cout << "订单已添加成功！" << std::endl;
				break;
			}
			case 2: {
				int orderId;
				std::cout << "请输入要处理的订单ID: ";
				std::cin >> orderId;
				orderProcessor.processOrder(orderId);
				std::cout << "订单已开始处理！" << std::endl;
				break;
			}
			case 3: {
				int orderId;
				std::cout << "请输入已完成的订单ID: ";
				std::cin >> orderId;
				orderProcessor.completeOrder(orderId);
				std::cout << "订单已完成！" << std::endl;
				break;
			}
			case 4: {
				int orderId;
				std::cout << "请输入要取消的订单ID: ";
				std::cin >> orderId;
				orderProcessor.cancelOrder(orderId);
				std::cout << "订单已取消！" << std::endl;
				break;
			}
			case 5: {
				int orderId;
				std::cout << "请输入要退款的订单ID: ";
				std::cin >> orderId;
				if (orderProcessor.refundOrder(orderId)) {
					std::cout << "退款成功！" << std::endl;
				} else {
					std::cout << "退款失败！" << std::endl;
				}
				break;
			}
			case 6: {
				std::string filename;
				std::cout << "请输入要保存订单的文件名: ";
				std::cin >> filename;
				orderProcessor.saveOrdersToFile(filename);
				std::cout << "订单已保存到文件！" << std::endl;
				break;
			}
			case 7: {
				std::string filename;
				std::cout << "请输入要加载订单的文件名: ";
				std::cin >> filename;
				orderProcessor.loadOrdersFromFile(filename);
				std::cout << "订单已从文件加载！" << std::endl;
				break;
			}
		case 8:
			orderProcessor.printOrders();
			break;
		case 9:
			std::cout << "退出系统。" << std::endl;
			break;
		default:
			std::cout << "无效的选项！" << std::endl;
			break;
		}
		
		std::cout << std::endl;
	} while (choice != 9);
	
	return 0;
}


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

struct Student {
	string studentId;
	string name;
	int age;
	string gender;
	string birthDate;
	string address;
	string phone;
	string email;
};

vector<Student> students;

void addStudent() {
	Student newStudent;
	cout << "请输入学号: ";
	cin >> newStudent.studentId;
	cout << "请输入姓名: ";
	cin >> newStudent.name;
	cout << "请输入年龄: ";
	cin >> newStudent.age;
	cout << "请输入性别: ";
	cin >> newStudent.gender;
	cout << "请输入出生年月: ";
	cin >> newStudent.birthDate;
	cout << "请输入家庭住址: ";
	cin >> newStudent.address;
	cout << "请输入电话: ";
	cin >> newStudent.phone;
	cout << "请输入E-mail: ";
	cin >> newStudent.email;
	
	students.push_back(newStudent);
	cout << "学生信息添加成功！" << endl;
}

void displayStudent(const Student& student) {
	cout << "学号: " << student.studentId << endl;
	cout << "姓名: " << student.name << endl;
	cout << "年龄: " << student.age << endl;
	cout << "性别: " << student.gender << endl;
	cout << "出生年月: " << student.birthDate << endl;
	cout << "家庭住址: " << student.address << endl;
	cout << "电话: " << student.phone << endl;
	cout << "E-mail: " << student.email << endl;
	cout << endl;
}

void searchStudentById(const string& studentId) {
	bool found = false;
	for (const auto& student : students) {
		if (student.studentId == studentId) {
			displayStudent(student);
			found = true;
			break;
		}
	}
	if (!found) {
		cout << "没有找到该学号的学生。" << endl;
	}
}

void searchStudentByName(const string& name) {
	bool found = false;
	for (const auto& student : students) {
		if (student.name == name) {
			displayStudent(student);
			found = true;
		}
	}
	if (!found) {
		cout << "没有找到该姓名的学生。" << endl;
	}
}

bool compareStudentById(const Student& student1, const Student& student2) {
	return student1.studentId < student2.studentId;
}

bool compareStudentByName(const Student& student1, const Student& student2) {
	return student1.name < student2.name;
}

void sortStudentsById() {
	sort(students.begin(), students.end(), compareStudentById);
	cout << "已按学号排序。" << endl;
	for (const auto& student : students) {
		displayStudent(student);
	}
}

void sortStudentsByName() {
	sort(students.begin(), students.end(), compareStudentByName);
	cout << "已按姓名排序。" << endl;
	for (const auto& student : students) {
		displayStudent(student);
	}
}

void deleteStudent(const string& studentId) {
	for (auto it = students.begin(); it != students.end(); ++it) {
		if (it->studentId == studentId) {
			students.erase(it);
			cout << "学生信息删除成功！" << endl;
			return;
		}
	}
	cout << "没有找到该学号的学生。" << endl;
}

void menuAdmin() {
	while (true) {
		cout << "---------------------" << endl;
		cout << "系统管理员菜单：" << endl;
		cout << "1. 添加学生信息" << endl;
		cout << "2. 查询学生信息（按学号）" << endl;
		cout << "3. 查询学生信息（按姓名）" << endl;
		cout << "4. 按学号排序" << endl;
		cout << "5. 按姓名排序" << endl;
		cout << "6. 删除学生信息" << endl;
		cout << "0. 退出系统" << endl;
		cout << "请输入操作编号: ";
		
		int choice;
		cin >> choice;
		
		if (choice == 0) {
			break;
		}
		
		switch (choice) {
		case 1:
			addStudent();
			break;
			case 2: {
				string studentId;
				cout << "请输入要查询的学生学号: ";
				cin >> studentId;
				searchStudentById(studentId);
				break;
			}
			case 3: {
				string name;
				cout << "请输入要查询的学生姓名: ";
				cin >> name;
				searchStudentByName(name);
				break;
			}
		case 4:
			sortStudentsById();
			break;
		case 5:
			sortStudentsByName();
			break;
			case 6: {
				string studentId;
				cout << "请输入要删除的学生学号: ";
				cin >> studentId;
				deleteStudent(studentId);
				break;
			}
		default:
			cout << "无效的操作编号，请重新输入。" << endl;
			break;
		}
	}
}

void menuStudent() {
	while (true) {
		cout << "---------------------" << endl;
		cout << "学生菜单：" << endl;
		cout << "1. 查询学生信息（按学号）" << endl;
		cout << "2. 查询学生信息（按姓名）" << endl;
		cout << "0. 退出系统" << endl;
		cout << "请输入操作编号: ";
		
		int choice;
		cin >> choice;
		
		if (choice == 0) {
			break;
		}
		
		switch (choice) {
			case 1: {
				string studentId;
				cout << "请输入要查询的学生学号: ";
				cin >> studentId;
				searchStudentById(studentId);
				break;
			}
			case 2: {
				string name;
				cout << "请输入要查询的学生姓名: ";
				cin >> name;
				searchStudentByName(name);
				break;
			}
		default:
			cout << "无效的操作编号，请重新输入。" << endl;
			break;
		}
	}
}

int main() {
	while (true) {
		cout << "---------------------" << endl;
		cout << "欢迎使用学生信息管理系统！" << endl;
		cout << "请选择登录角色：" << endl;
		cout << "1. 系统管理员" << endl;
		cout << "2. 学生" << endl;
		cout << "0. 退出系统" << endl;
		cout << "请输入角色编号: ";
		
		int role;
		cin >> role;
		
		if (role == 0) {
			break;
		}
		
		switch (role) {
		case 1:
			menuAdmin();
			break;
		case 2:
			menuStudent();
			break;
		default:
			cout << "无效的角色编号，请重新输入。" << endl;
			break;
		}
	}
	
	return 0;
}


